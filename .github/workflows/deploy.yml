name: Deploy Laravel Application (Server-Build)

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup SSH
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH-Agent konfigurieren
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          # Host-Schlüssel hinzufügen
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          # SSH-Konfiguration erstellen - sorgt für konsistente Verwendung des Schlüssels
          echo "Host server" >> ~/.ssh/config
          echo "  HostName ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  IdentitiesOnly yes" >> ~/.ssh/config
          echo "  ForwardAgent yes" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      # 3. Teste SSH-Verbindung
      - name: Test SSH connection
        run: |
          echo "Teste SSH-Verbindung zum Server..."
          ssh -v server "echo 'SSH-Verbindung erfolgreich! Arbeitsverzeichnis:' && pwd"

      # 4. Transfer code to server
      - name: Deploy via rsync
        run: |
          echo "Übertrage Code zum Server..."
          rsync -avz --delete --exclude-from='.rsync-exclude' -e "ssh -i ~/.ssh/id_rsa" ./ server:${{ secrets.SSH_PATH }}/

      # 5. Set up .env on server
      - name: Setup .env on Server
        run: |
          echo "Konfiguriere .env-Datei auf dem Server..."
          ssh server "cat > ${{ secrets.SSH_PATH }}/.env << 'EOL'
          APP_NAME=SV-Polle
          APP_ENV=${{ secrets.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}

          APP_LOCALE=de
          APP_FALLBACK_LOCALE=de
          APP_FAKER_LOCALE=de_DE

          BCRYPT_ROUNDS=12

          DB_CONNECTION=${{ secrets.DB_CONNECTION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          MAIL_MAILER=${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME=${{ secrets.MAIL_SCHEME }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME="${APP_NAME}"

          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN }}

          QUEUE_CONNECTION=database
          CACHE_STORE=database

          FILESYSTEM_DISK=local

          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=warning

          BROADCAST_CONNECTION=log

          VITE_APP_NAME="${APP_NAME}"

          API_FOOTBALL_API_KEY=${{ secrets.API_FOOTBALL_API_KEY }}
          API_FOOTBALL_API_LIMIT=30
          API_FOOTBALL_API_CLUB_ID=${{ secrets.API_FOOTBALL_API_CLUB_ID }}
          EOL"

      # 6. Führe Installation und Build auf dem Server aus
      - name: Install Dependencies and Build on Server
        run: |
          echo "Installiere Abhängigkeiten und führe Build auf dem Server durch..."
          ssh server "cd ${{ secrets.SSH_PATH }} && \
          echo 'Installing Composer dependencies...' && \
          composer install --no-dev --optimize-autoloader --no-interaction && \
          echo 'Creating required directories...' && \
          mkdir -p storage/framework/{sessions,views,cache} && \
          mkdir -p bootstrap/cache && \
          echo 'Setting permissions...' && \
          chmod -R 775 storage && \
          chmod -R 775 bootstrap/cache && \
          echo 'Installing NPM dependencies...' && \
          npm ci && \
          echo 'Building frontend assets...' && \
          npm run build && \
          echo 'Running migrations...' && \
          php artisan migrate --force && \
          echo 'Optimizing application...' && \
          php artisan optimize:clear && \
          php artisan config:cache && \
          php artisan route:cache && \
          php artisan view:cache && \
          php artisan event:cache && \
          echo 'Deployment abgeschlossen.'"
