name: Deploy Laravel Application (Local-Build)

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql
          coverage: none

      # 3. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 4. Install Composer dependencies
      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      # 5. Install npm dependencies & build assets
      - name: Install npm dependencies & build
        run: |
          npm ci
          npm run build

      # 6. Setup SSH
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          echo "Host server" >> ~/.ssh/config
          echo "  HostName ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  IdentitiesOnly yes" >> ~/.ssh/config
          echo "  ForwardAgent yes" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      # 7. Test SSH connection
      - name: Test SSH connection
        run: |
          echo "Teste SSH-Verbindung zum Server..."
          ssh -v server "echo 'SSH-Verbindung erfolgreich! Arbeitsverzeichnis:' && pwd"

      # 8. Konfiguriere PHP auf Hestia (optional)
      - name: Configure PHP on Hestia
        run: |
          echo "Konfiguriere PHP auf Hestia..."
          ssh server "if [ -f /usr/local/hestia/bin/v-change-web-domain-php-version ]; then \
            source /etc/profile.d/hestia.sh && \
            echo 'Setting PHP version for domain...' && \
            v-change-web-domain-php-version ${{ secrets.SSH_USER }} \$(v-list-web-domains ${{ secrets.SSH_USER }} | grep -m1 -oP '(?<=DOMAIN: ).*') 8.2; \
          else \
            echo 'Hestia PHP version command not found. Using default PHP.'; \
          fi"

      # 9. Prepare exclusions for rsync
      - name: Prepare exclusions
        run: |
          echo ".git" > .rsync-exclude
          echo ".github" >> .rsync-exclude
          echo ".env" >> .rsync-exclude
          echo "node_modules" >> .rsync-exclude
          echo "tests" >> .rsync-exclude
          echo ".gitignore" >> .rsync-exclude
          echo "README.md" >> .rsync-exclude

      # 10. Deploy code to server
      - name: Deploy via rsync
        run: |
          echo "Übertrage Code zum Server..."
          rsync -avz --delete --exclude-from='.rsync-exclude' -e "ssh -i ~/.ssh/id_rsa" ./ server:${{ secrets.SSH_PATH }}/

      # 11. Set up .env on server
      - name: Setup .env on Server
        run: |
          echo "Konfiguriere .env-Datei auf dem Server..."
          ssh server "cat > ${{ secrets.SSH_PATH }}/.env << 'EOL'
          APP_NAME=SV-Polle
          APP_ENV=${{ secrets.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}

          APP_LOCALE=de
          APP_FALLBACK_LOCALE=de
          APP_FAKER_LOCALE=de_DE

          BCRYPT_ROUNDS=12

          DB_CONNECTION=${{ secrets.DB_CONNECTION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          MAIL_MAILER=${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME=${{ secrets.MAIL_SCHEME }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME=\"\${APP_NAME}\"

          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN }}

          QUEUE_CONNECTION=database
          CACHE_STORE=database

          FILESYSTEM_DISK=local

          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=warning

          BROADCAST_CONNECTION=log

          VITE_APP_NAME=\"\${APP_NAME}\"

          API_FOOTBALL_API_KEY=${{ secrets.API_FOOTBALL_API_KEY }}
          API_FOOTBALL_API_LIMIT=30
          API_FOOTBALL_API_CLUB_ID=${{ secrets.API_FOOTBALL_API_CLUB_ID }}
          EOL"

      # 12. Run post-deployment commands
      - name: Post-deployment tasks
        run: |
          echo "Führe Post-Deployment Aufgaben aus..."
          ssh server "cd ${{ secrets.SSH_PATH }} && \
          echo 'Creating required directories...' && \
          mkdir -p storage/framework/{sessions,views,cache} && \
          mkdir -p bootstrap/cache && \
          echo 'Setting permissions...' && \
          chmod -R 775 storage && \
          chmod -R 775 bootstrap/cache && \
          echo 'Setting proper ownership for Hestia...' && \
          chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} . && \
          echo 'Using PHP: ' && php -v && \
          echo 'Running migrations...' && \
          php artisan migrate --force && \
          echo 'Optimizing application...' && \
          php artisan optimize:clear && \
          php artisan config:cache && \
          php artisan route:cache && \
          php artisan view:cache && \
          php artisan event:cache && \
          echo 'Deployment abgeschlossen.'"
